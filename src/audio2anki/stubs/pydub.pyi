from typing import Any

class AudioSegment:
    duration_seconds: float
    frame_rate: int
    frame_width: int
    channels: int

    def __init__(self, data: Any = ...) -> None: ...
    def export(self, out_file: str | None = None, format: str | None = None, **kwargs: Any) -> Any: ...
    def get_frame_count(self) -> int: ...
    def set_frame_rate(self, frame_rate: int) -> AudioSegment: ...
    def set_channels(self, channels: int) -> AudioSegment: ...
    def get_array_of_samples(self) -> list[float]: ...
    def from_file(file: str | bytes, format: str | None = None, **kwargs: Any) -> AudioSegment: ...
    def from_mp3(file: str | bytes) -> AudioSegment: ...
    def from_wav(file: str | bytes) -> AudioSegment: ...
    def empty(self) -> AudioSegment: ...
    def __add__(self, other: AudioSegment) -> AudioSegment: ...
    def __radd__(self, other: AudioSegment) -> AudioSegment: ...
    def __mul__(self, value: int) -> AudioSegment: ...
    def __rmul__(self, value: int) -> AudioSegment: ...
    def split_to_mono(self) -> list[AudioSegment]: ...

class silence:
    @staticmethod
    def detect_silence(
        audio_segment: AudioSegment, min_silence_len: int = 1000, silence_thresh: int = -16, seek_step: int = 1
    ) -> list[tuple[int, int]]: ...
    @staticmethod
    def detect_nonsilent(
        audio_segment: AudioSegment, min_silence_len: int = 1000, silence_thresh: int = -16, seek_step: int = 1
    ) -> list[tuple[int, int]]: ...
    @staticmethod
    def split_on_silence(
        audio_segment: AudioSegment,
        min_silence_len: int = 1000,
        silence_thresh: int = -16,
        keep_silence: int = 100,
        seek_step: int = 1,
    ) -> list[AudioSegment]: ...
